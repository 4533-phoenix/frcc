//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "scan")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub card: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub username: String,
    pub scan_time: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::card::Entity",
        from = "Column::Card",
        to = "super::card::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Card,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::Username",
        to = "super::user::Column::Username",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::card::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Card.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
