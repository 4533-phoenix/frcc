//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "card")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub design: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::card_design::Entity",
        from = "Column::Design",
        to = "super::card_design::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    CardDesign,
    #[sea_orm(has_many = "super::scan::Entity")]
    Scan,
}

impl Related<super::card_design::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CardDesign.def()
    }
}

impl Related<super::scan::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Scan.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::scan::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::scan::Relation::Card.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
