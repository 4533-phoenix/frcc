{% extends "base.tera" %}

{% block title %}Admin Panel{% endblock title %}

{% block head %}
{{ super() }}
<style>
    /* Only keeping essential admin-specific styles */
    .user-search {
        display: flex;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }
    
    .user-search input {
        flex: 1;
    }

    .user-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 1.5rem;
    }

    .user-table th,
    .user-table td {
        padding: 0.75rem;
        text-align: left;
        border-bottom: 1px solid rgba(95, 190, 203, 0.2);
    }

    .user-table th {
        background-color: rgba(95, 190, 203, 0.1);
        color: var(--secondary);
    }

    .user-table tr:hover {
        background-color: rgba(95, 190, 203, 0.05);
    }
    
    /* Checkbox styles - keeping only what's needed */
    .checkbox-wrapper {
        display: flex;
        align-items: center;
        gap: 0.7rem;
        margin-top: 0.75rem;
    }
    
    .checkbox-wrapper input[type="checkbox"] {
        width: 18px;
        height: 18px;
        accent-color: var(--primary);
    }
</style>
{% endblock head %}

{% block content %}
<!-- Admin Header -->
<section class="page-header">
    <div class="container">
        <h1 style="font-size: 2.5rem; margin-bottom: 1rem;">Administration Panel</h1>
        <p>Manage users and site settings</p>
    </div>
</section>

<section class="section">
    <div class="container">
        <!-- User Management Section -->
        <div class="content-box">
            <h2 class="section-title">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="var(--primary)" style="margin-right: 0.5rem;">
                    <path d="M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z"/>
                </svg>
                User Management
            </h2>
            <p>Search for users and manage their accounts.</p>
            
            <div class="user-search">
                <input type="text" id="userSearchInput" placeholder="Search by username" class="form-control">
                <button id="userSearchBtn" class="btn btn-primary">Search</button>
            </div>
            
            <div class="user-results">
                <table class="user-table">
                    <thead>
                        <tr>
                            <th>Username</th>
                            <th>Team</th>
                            <th>Role</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="userTableBody">
                        <!-- User rows will be populated here -->
                    </tbody>
                </table>
            </div>
            
            <!-- User Edit Form (initially hidden) -->
            <div id="userEditForm" class="content-box" style="display: none; margin-top: 2rem; border-left: 4px solid var(--primary);">
                <h2 class="section-title">
                    <svg viewBox="0 0 24 24" width="24" height="24" fill="var(--primary)">
                        <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
                    </svg>
                    Edit User: <span id="editUserTitle"></span>
                </h2>
                
                <form id="editUserForm" class="auth-form">
                    <input type="hidden" id="editUserId">
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="editUsername">Username</label>
                            <input type="text" id="editUsername" name="username" required class="form-control">
                            <p class="help-text">User's login identifier</p>
                        </div>
                        
                        <div class="form-group">
                            <label for="editTeam">Team Number</label>
                            <input type="number" id="editTeam" name="team" placeholder="Enter team number" class="form-control">
                            <p class="help-text">Leave empty for no team</p>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label>User Permissions</label>
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="is_team_admin">
                                <label for="is_team_admin">Team Administrator</label>
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Special Permissions</label>
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="is_verified">
                                <label for="is_verified">Verified User (can create invite codes)</label>
                            </div>
                            <div class="checkbox-wrapper">
                                <input type="checkbox" id="is_admin">
                                <label for="is_admin">Site Administrator</label>
                            </div>
                        </div>
                    </div>
                    
                    <div class="btn-row">
                        <button type="button" id="cancelEditBtn" class="btn btn-secondary">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</section>
{% endblock content %}

{% block scripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Elements
        const userSearchInput = document.getElementById('userSearchInput');
        const userSearchBtn = document.getElementById('userSearchBtn');
        const userTableBody = document.getElementById('userTableBody');
        const userEditForm = document.getElementById('userEditForm');
        const editUserForm = document.getElementById('editUserForm');
        const cancelEditBtn = document.getElementById('cancelEditBtn');
        const editUserTitle = document.getElementById('editUserTitle');
        
        // Search Users
        userSearchBtn.addEventListener('click', fetchUsers);
        userSearchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                fetchUsers();
            }
        });
        
        // Fetch users from API
        async function fetchUsers() {
            const searchTerm = userSearchInput.value.trim();
            if (!searchTerm) {
                FRCC.showNotification('Please enter a search term', 'error');
                return;
            }
            
            try {
                const response = await fetch('/api/users');
                if (!response.ok) throw new Error('Failed to fetch users');
                
                const users = await response.json();
                displayUsers(users);
            } catch (error) {
                FRCC.showNotification(error.message, 'error');
            }
        }
        
        // Display users in table
        function displayUsers(users) {
            userTableBody.innerHTML = '';
            
            if (users.length === 0) {
                userTableBody.innerHTML = '<tr><td colspan="4">No users found</td></tr>';
                return;
            }
            
            users.forEach(user => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${user.username}</td>
                    <td>${user.team || 'No Team'}</td>
                    <td>${getRoleLabel(user)}</td>
                    <td>
                        <button class="btn btn-secondary edit-user-btn" data-user-id="${user.username}">Edit</button>
                    </td>
                `;
                userTableBody.appendChild(row);
            });
            
            // Add click handlers to edit buttons
            document.querySelectorAll('.edit-user-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const userId = this.getAttribute('data-user-id');
                    loadUserForEdit(userId);
                });
            });
        }
        
        // Get role label based on user permissions
        function getRoleLabel(user) {
            if (user.is_admin) return 'Site Admin';
            if (user.is_verified) return 'Verified User';
            if (user.is_team_admin) return 'Team Administrator';
            return 'Standard User';
        }
        
        // Load User for Edit
        async function loadUserForEdit(username) {
            try {
                const response = await fetch(`/api/user/${username}`);
                if (!response.ok) throw new Error('Failed to load user details');
                
                const userDetails = await response.json();
                
                // Fill form fields
                document.getElementById('editUserId').value = userDetails.username;
                document.getElementById('editUsername').value = userDetails.username;
                document.getElementById('editTeam').value = userDetails.team || '';
                document.getElementById('is_team_admin').checked = userDetails.is_team_admin || false;
                document.getElementById('is_verified').checked = userDetails.is_verified;
                document.getElementById('is_admin').checked = userDetails.is_admin;
                
                // Update title and show form
                editUserTitle.textContent = userDetails.username;
                userEditForm.style.display = 'block';
                userEditForm.scrollIntoView({ behavior: 'smooth' });
            } catch (error) {
                FRCC.showNotification(error.message, 'error');
            }
        }
        
        // Cancel Edit
        cancelEditBtn.addEventListener('click', function() {
            userEditForm.style.display = 'none';
        });
        
        // Handle Edit Form Submit
        editUserForm.addEventListener('submit', async function(event) {
            event.preventDefault();
            
            const userId = document.getElementById('editUserId').value;
            const formData = {
                username: document.getElementById('editUsername').value,
                team: document.getElementById('editTeam').value || null,
                is_team_admin: document.getElementById('is_team_admin').checked,
                is_verified: document.getElementById('is_verified').checked,
                is_admin: document.getElementById('is_admin').checked
            };
            
            try {
                const response = await fetch(`/api/user/${userId}`, {
                    method: 'PUT',
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(formData),
                });
                
                if (!response.ok) throw new Error('Failed to update user');
                
                FRCC.showNotification('User updated successfully', 'success');
                userEditForm.style.display = 'none';
                
                // Refresh user list
                fetchUsers();
            } catch (error) {
                FRCC.showNotification(error.message, 'error');
            }
        });
        
        // Initialize with a default search if input has value
        if (userSearchInput.value.trim()) {
            fetchUsers();
        }
    });
</script>
{% endblock scripts %}
