{% extends "base.tera" %}

{% block head %}
{{ super() }}
<style>
    .empty-state {
        text-align: center;
        padding: 3rem 0;
        color: var(--secondary);
    }

    .gradient-section.cards-hero {
        position: relative;
        padding: 5rem 0;
        overflow: hidden;
    }

    .gradient-section.cards-hero::before {
        content: "";
        position: absolute;
        inset: 0;
        background: linear-gradient(120deg, rgba(95, 190, 203, 0.3) 0%, rgba(47, 110, 118, 0.2) 100%);
        opacity: 0.5;
        z-index: -1;
    }

    .cards-stats {
        display: flex;
        justify-content: center;
        gap: 3rem;
        margin-top: 1.5rem;
    }

    .stat-item {
        text-align: center;
    }

    .stat-value {
        font-size: 2.5rem;
        font-weight: bold;
        color: var(--primary);
    }

    .stat-label {
        font-size: 0.9rem;
        color: var(--text);
        opacity: 0.8;
    }

    .collection-card {
        position: relative;
        transition: transform 0.4s cubic-bezier(0.34, 1.56, 0.64, 1), box-shadow 0.4s ease;
        aspect-ratio: 63 / 88 !important;
        height: auto !important;
        width: 100%;
        display: flex;
        align-items: flex-end;
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
        overflow: hidden;
    }

    .collection-card-info {
        position: relative !important;
        background: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 1rem;
        width: 100%;
        opacity: 1 !important;
        transition: none !important;
    }

    .collection-card:hover {
        transform: translateY(-10px) scale(1.02);
        box-shadow: 0 20px 30px rgba(0, 0, 0, 0.2);
    }

    .collection-card.locked {
        filter: grayscale(1) opacity(0.7);
        transform: none !important;
        box-shadow: none !important;
        pointer-events: none;
    }

    .collection-card.locked:hover {
        transform: none !important;
        box-shadow: none !important;
    }

    .collection-card.locked::before {
        content: "";
        position: absolute;
        inset: 0;
        background-color: rgba(0, 0, 0, 0.2);
        border-radius: var(--border-radius);
        z-index: 1;
    }

    .collection-card.locked::after {
        content: "ðŸ”’";
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 2rem;
        z-index: 2;
    }

    .collection-card.locked .collection-card-subtitle {
        filter: blur(5px);
        color: var(--primary);
        text-shadow: 0 0 8px rgba(95, 190, 203, 0.8);
        letter-spacing: 1px;
        user-select: none;
        pointer-events: none;
    }

    .cards-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 1.8rem;
    }
</style>
{% endblock head %}

{% block title %}Cards Collection{% endblock title %}

{% block content %}
<!-- Hero section with enhanced styling -->
<section class="gradient-section cards-hero">
    <div class="container">
        <h1 class="gradient-text">Cards Collection</h1>
        <p>Browse our collection of robot cards from past seasons</p>

        <div class="cards-stats">
            <div class="stat-item">
                <div class="stat-value" id="total-cards">0</div>
                <div class="stat-label">Total Cards</div>
            </div>
            <div class="stat-item">
                <div class="stat-value" id="total-seasons">0</div>
                <div class="stat-label">Seasons</div>
            </div>
        </div>
    </div>
</section>

<section class="section" id="cards-container">
    <!-- Cards will be loaded dynamically by JavaScript -->
    <div class="container text-center" id="loading">
        <p>Loading cards...</p>
    </div>
</section>

<script>
    // Fetch cards from API and render them
    document.addEventListener('DOMContentLoaded', async function() {
        try {
            const response = await fetch('/api/cards');
            if (!response.ok) {
                throw new Error('Failed to fetch cards');
            }
            
            const cards = await response.json();
            renderCards(cards);
        } catch (error) {
            console.error('Error fetching cards:', error);
            document.getElementById('loading').innerHTML = `
                <div class="empty-state">
                    <h3>Unable to load cards</h3>
                    <p>Please try again later</p>
                </div>
            `;
        }
    });

    function renderCards(cards) {
        const container = document.getElementById('cards-container');
        const loadingElement = document.getElementById('loading');
        
        // Remove loading indicator
        if (loadingElement) {
            loadingElement.remove();
        }
        
        // Calculate stats
        document.getElementById('total-cards').textContent = cards.length;
        
        // Group cards by year
        const cardsByYear = {};
        cards.forEach(cardResponse => {
            const card = cardResponse.card;
            const year = card.year || 'Unknown';
            
            if (!cardsByYear[year]) {
                cardsByYear[year] = [];
            }
            
            cardsByYear[year].push({
                ...card,
                unlocked: cardResponse.unlocked
            });
        });
        
        document.getElementById('total-seasons').textContent = Object.keys(cardsByYear).length;
        
        // Sort years in descending order
        const sortedYears = Object.keys(cardsByYear).sort((a, b) => b - a);
        
        // If no cards, show empty state
        if (sortedYears.length === 0) {
            container.innerHTML = `
                <div class="container">
                    <div class="empty-state">
                        <h3>No cards found</h3>
                        <p>Check back later for new cards!</p>
                    </div>
                </div>
            `;
            return;
        }
        
        // Build HTML for each year section
        let cardsHTML = '';
        
        sortedYears.forEach(year => {
            const yearCards = cardsByYear[year];
            
            cardsHTML += `
                <div class="container">
                    <h2 class="section-title">${year} Season Cards</h2>
                    <div class="cards-grid">
            `;
            
            yearCards.forEach(card => {
                // Create a gradient background based on team number (for consistent coloring)
                const teamNumber = card.team_number || 0;
                const hue1 = (teamNumber * 5) % 360;
                const hue2 = (hue1 + 40) % 360;
                const hue3 = (hue2 + 40) % 360;
                const gradient = `linear-gradient(135deg, hsl(${hue1}, 70%, 40%) 0%, hsl(${hue2}, 70%, 45%) 50%, hsl(${hue3}, 70%, 50%) 100%)`;
                
                cardsHTML += `
                    <div class="collection-card ${!card.unlocked ? 'locked' : ''}"
                        style="background: ${gradient};"
                        onclick="showCardDetails(${card.id}, ${year})">
                        <div class="collection-card-info">
                            <p class="collection-card-title">Team ${card.team_number} - ${card.team_name || ''}</p>
                            <p class="collection-card-subtitle">${card.name}</p>
                        </div>
                    </div>
                `;
            });
            
            cardsHTML += `
                    </div>
                </div>
            `;
        });
        
        container.innerHTML = cardsHTML;
    }

    function showCardDetails(cardId, year) {
        // Don't process clicks on locked cards
        const clickedCard = event.currentTarget;
        if (clickedCard.classList.contains('locked')) {
            return;
        }

        // Navigate to a detail page or open a modal
        console.log(`Viewing card ${cardId} from ${year}`);
        
        // You could implement a modal here or redirect to a details page
        // For now, let's redirect to the design page
        window.location.href = `/design/${cardId}`;
    }
</script>
{% endblock content %}
