{% extends "base.tera" %}

{% block head %}
{{ super() }}
<!-- Load zxing-wasm library properly with initialization check -->
<script>
    // Load ZXing WASM dynamically
    let zxingLoaded = false;
    let ZXingWASM = null;
    
    function loadZXingLibrary() {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = "https://unpkg.com/@zxing/library@latest";
            script.onload = () => {
                console.log("ZXing library loaded successfully");
                zxingLoaded = true;
                resolve();
            };
            script.onerror = () => {
                console.error("Failed to load ZXing library");
                reject(new Error("Failed to load barcode scanning library"));
            };
            document.head.appendChild(script);
        });
    }
</script>
<style>
    .scan-container {
        display: flex;
        height: calc(100vh - 120px);
        position: relative;
        overflow: hidden;
    }
    
    .camera-container {
        flex: 1;
        position: relative;
        overflow: hidden;
        background-color: #000;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    #video {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    .info-panel {
        width: 350px;
        background-color: var(--background-primary);
        box-shadow: -5px 0 15px rgba(0, 0, 0, 0.1);
        padding: 2rem;
        overflow-y: auto;
        transition: transform 0.3s ease;
        z-index: 10;
    }
    
    .camera-controls {
        position: absolute;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 5;
        display: flex;
        gap: 1rem;
    }
    
    .control-btn {
        background: rgba(0, 0, 0, 0.6);
        color: white;
        border: none;
        border-radius: 50%;
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: var(--transition);
    }
    
    .control-btn:hover {
        background: rgba(0, 0, 0, 0.8);
        transform: scale(1.05);
    }
    
    .control-icon {
        width: 24px;
        height: 24px;
        background-color: white;
    }
    
    .switch-camera-icon {
        mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M20 4h-3.17L15 2H9L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-5 11.5V13H9v2.5L5.5 12 9 8.5V11h6V8.5l3.5 3.5-3.5 3.5z'/%3E%3C/svg%3E");
        -webkit-mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M20 4h-3.17L15 2H9L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-5 11.5V13H9v2.5L5.5 12 9 8.5V11h6V8.5l3.5 3.5-3.5 3.5z'/%3E%3C/svg%3E");
        mask-size: contain;
        -webkit-mask-size: contain;
        mask-repeat: no-repeat;
        -webkit-mask-repeat: no-repeat;
        mask-position: center;
        -webkit-mask-position: center;
    }
    
    .camera-loading {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: white;
        text-align: center;
    }
    
    .loading-spinner {
        width: 50px;
        height: 50px;
        border: 5px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: var(--primary);
        animation: spin 1s ease-in-out infinite;
        margin: 0 auto 1rem;
    }
    
    @keyframes spin {
        to { transform: rotate(360deg); }
    }
    
    .card-detected {
        position: absolute;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: var(--gradient-primary);
        color: white;
        padding: 10px 20px;
        border-radius: 30px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        opacity: 0;
        transition: opacity 0.3s ease;
        z-index: 5;
    }
    
    .card-detected.visible {
        opacity: 1;
        animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
        0% { box-shadow: 0 0 0 0 rgba(95, 190, 203, 0.7); }
        70% { box-shadow: 0 0 0 10px rgba(95, 190, 203, 0); }
        100% { box-shadow: 0 0 0 0 rgba(95, 190, 203, 0); }
    }
    
    .scan-instructions {
        text-align: center;
        padding: 2rem 0;
    }
    
    .scan-instructions img {
        width: 100px;
        height: 100px;
        margin: 0 auto 1rem;
        opacity: 0.7;
    }
    
    .card-info {
        display: none;
    }
    
    .card-info.visible {
        display: block;
        animation: fadeIn 0.5s ease;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .card-image {
        width: 100%;
        height: 200px;
        background: var(--gradient-primary);
        border-radius: var(--border-radius);
        margin-bottom: 1.5rem;
    }
    
    .card-stats {
        margin-top: 1.5rem;
    }
    
    .stat-row {
        display: flex;
        justify-content: space-between;
        padding: 0.5rem 0;
        border-bottom: 1px solid rgba(95, 190, 203, 0.2);
    }
    
    .stat-label {
        font-weight: 600;
        color: var(--primary);
    }
    
    @media (max-width: 768px) {
        .scan-container {
            flex-direction: column;
            height: calc(100vh - 70px);
        }
        
        .info-panel {
            width: 100%;
            height: 40%;
            box-shadow: 0 -5px 15px rgba(0, 0, 0, 0.1);
            transform: translateY(85%);
            position: absolute;
            bottom: 0;
            border-radius: 20px 20px 0 0;
            padding-top: 1rem;
        }
        
        .info-panel.expanded {
            transform: translateY(0);
        }
        
        .drag-handle {
            width: 50px;
            height: 5px;
            background-color: var(--background-secondary);
            border-radius: 10px;
            margin: 0 auto 1rem;
        }
        
        .scroll-indicator {
            position: absolute;
            width: 40px;
            height: 40px;
            background-color: rgba(255, 255, 255, 0.8);
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 5;
        }
        
        .scroll-up {
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
        }
        
        .scroll-down {
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
        }
        
        .scroll-left {
            left: 20px;
            top: 50%;
            transform: translateY(-50%);
        }
        
        .scroll-right {
            right: 20px;
            top: 50%;
            transform: translateY(-50%);
        }
        
        .scroll-icon {
            width: 20px;
            height: 20px;
            background-color: var(--primary);
            mask-size: contain;
            -webkit-mask-size: contain;
            mask-repeat: no-repeat;
            -webkit-mask-repeat: no-repeat;
            mask-position: center;
            -webkit-mask-position: center;
        }
        
        .arrow-icon {
            mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z'/%3E%3C/svg%3E");
            -webkit-mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z'/%3E%3C/svg%3E");
        }
        
        .arrow-up { transform: rotate(-90deg); }
        .arrow-down { transform: rotate(90deg); }
        .arrow-left { transform: rotate(180deg); }
        .arrow-right { transform: rotate(0); }
    }
</style>
{% endblock head %}

{% block title %}Scan Cards{% endblock title %}

{% block content %}
<section class="scan-container" id="scanContainer">
    <div class="camera-container">
        <video id="video" autoplay playsinline></video>
        
        <div class="camera-loading" id="cameraLoading">
            <div class="loading-spinner"></div>
            <p>Initializing camera...</p>
        </div>
        
        <div class="card-detected" id="cardDetected">
            Card Detected!
        </div>
        
        <div class="camera-controls">
            <button class="control-btn" id="switchCameraBtn" aria-label="Switch camera">
                <span class="control-icon switch-camera-icon"></span>
            </button>
        </div>
        
        <div class="scroll-indicator scroll-up" id="scrollUp">
            <span class="scroll-icon arrow-icon arrow-up"></span>
        </div>
        <div class="scroll-indicator scroll-right" id="scrollRight">
            <span class="scroll-icon arrow-icon arrow-right"></span>
        </div>
        <div class="scroll-indicator scroll-down" id="scrollDown">
            <span class="scroll-icon arrow-icon arrow-down"></span>
        </div>
        <div class="scroll-indicator scroll-left" id="scrollLeft">
            <span class="scroll-icon arrow-icon arrow-left"></span>
        </div>
    </div>
    
    <div class="info-panel" id="infoPanel">
        <div class="drag-handle" id="dragHandle"></div>
        
        <div class="scan-instructions" id="scanInstructions">
            <img src="/static/scan-icon.svg" alt="Scan icon" aria-hidden="true">
            <h2>Scan a Card</h2>
            <p>Point your camera at any FCC card to view its details and AR content.</p>
        </div>
        
        <div class="card-info" id="cardInfo">
            <h2 id="teamName">Team Name</h2>
            <h3 id="teamNumber">Team Number</h3>
            
            <div class="card-image" id="cardImage"></div>
            
            <p id="cardDescription">Information about the team and their robot will appear here when you scan a card.</p>
            
            <div class="card-stats">
                <div class="stat-row">
                    <span class="stat-label">Year</span>
                    <span id="cardYear">2023</span>
                </div>
                <div class="stat-row">
                    <span class="stat-label">Competition</span>
                    <span id="cardCompetition">Championship</span>
                </div>
                <div class="stat-row">
                    <span class="stat-label">Awards</span>
                    <span id="cardAwards">Innovation Award</span>
                </div>
            </div>
            
            <div class="button-container">
                <button class="btn btn-primary" id="viewArBtn">View in AR</button>
                <button class="btn btn-secondary" id="addToCollectionBtn">Add to Collection</button>
            </div>
        </div>
    </div>
</section>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const video = document.getElementById('video');
        const cameraLoading = document.getElementById('cameraLoading');
        const cardDetected = document.getElementById('cardDetected');
        const switchCameraBtn = document.getElementById('switchCameraBtn');
        const infoPanel = document.getElementById('infoPanel');
        const scanInstructions = document.getElementById('scanInstructions');
        const cardInfo = document.getElementById('cardInfo');
        const dragHandle = document.getElementById('dragHandle');
        
        const teamName = document.getElementById('teamName');
        const teamNumber = document.getElementById('teamNumber');
        const cardDescription = document.getElementById('cardDescription');
        const cardYear = document.getElementById('cardYear');
        const cardCompetition = document.getElementById('cardCompetition');
        const cardAwards = document.getElementById('cardAwards');
        
        const scrollIndicators = document.querySelectorAll('.scroll-indicator');
        const isMobile = window.innerWidth <= 768;
        
        let currentStream = null;
        let availableCameras = [];
        let currentCameraIndex = 0;
        let scanInterval = null;
        let isScanning = false;
        let scannerInitialized = false;
        let codeReader = null;
        
        if (!isMobile) {
            scrollIndicators.forEach(indicator => {
                indicator.style.display = 'none';
            });
        }
        
        async function initCamera() {
            try {
                const devices = await navigator.mediaDevices.enumerateDevices();
                availableCameras = devices.filter(device => device.kind === 'videoinput');
                
                if (availableCameras.length === 0) {
                    throw new Error('No cameras found');
                }
                
                await startCamera();
                
                cameraLoading.style.display = 'none';
                
                switchCameraBtn.style.display = availableCameras.length > 1 ? 'flex' : 'none';
                
                startBarcodeScanning();
            } catch (error) {
                console.error('Error initializing camera:', error);
                cameraLoading.innerHTML = `
                    <p>Camera access error</p>
                    <p class="error-message">${error.message}</p>
                    <button class="btn btn-primary" id="retryBtn">Retry</button>
                `;
                document.getElementById('retryBtn').addEventListener('click', initCamera);
            }
        }
        
        async function startCamera() {
            if (currentStream) {
                currentStream.getTracks().forEach(track => track.stop());
            }
            
            if (scanInterval) {
                clearInterval(scanInterval);
                scanInterval = null;
            }
            
            try {
                let constraints = {
                    video: {
                        facingMode: 'environment'
                    }
                };
                
                if (availableCameras.length > 0 && currentCameraIndex >= 0 && currentCameraIndex < availableCameras.length) {
                    constraints.video.deviceId = { ideal: availableCameras[currentCameraIndex].deviceId };
                }
                
                try {
                    currentStream = await navigator.mediaDevices.getUserMedia(constraints);
                } catch (deviceIdError) {
                    console.warn('Could not access specific camera, trying without deviceId', deviceIdError);
                    constraints = { video: { facingMode: 'environment' } };
                    currentStream = await navigator.mediaDevices.getUserMedia(constraints);
                }
                
                video.srcObject = currentStream;
                
                const devices = await navigator.mediaDevices.enumerateDevices();
                availableCameras = devices.filter(device => device.kind === 'videoinput');
                switchCameraBtn.style.display = availableCameras.length > 1 ? 'flex' : 'none';
                
                if (currentCameraIndex >= availableCameras.length) {
                    currentCameraIndex = 0;
                }
                
                video.onloadedmetadata = () => {
                    if (video.readyState >= 2) {
                        if (!isScanning) {
                            startBarcodeScanning();
                        }
                    }
                };
            } catch (error) {
                console.error('Error starting camera:', error);
                throw error;
            }
        }
        
        async function switchCamera() {
            currentCameraIndex = (currentCameraIndex + 1) % availableCameras.length;
            isScanning = false;
            await startCamera();
        }
        
        function startBarcodeScanning() {
            isScanning = true;
            
            scanInterval = setInterval(() => {
                if (video.readyState === video.HAVE_ENOUGH_DATA) {
                    // Only attempt to scan if the library is initialized
                    if (scannerInitialized) {
                        scanBarcode();
                    } else {
                        // If library isn't loaded yet, just simulate for demo
                        simulateDetection();
                    }
                }
            }, 500);
        }
        
        async function scanBarcode() {
            if (!scannerInitialized) {
                return;
            }
            
            try {
                // Create canvas and get image data
                const canvas = document.createElement('canvas');
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                const ctx = canvas.getContext('2d');
                ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
                
                const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                
                // Use the ZXing library for decoding
                try {
                    if (!window.ZXing) {
                        // Initialize ZXing if needed
                        window.ZXing = await new Promise((resolve) => {
                            const tick = () => {
                                if (window.ZXing) {
                                    resolve(window.ZXing);
                                } else {
                                    setTimeout(tick, 100);
                                }
                            };
                            tick();
                        });
                    }
                    
                    // Create the reader if we haven't yet
                    if (!codeReader) {
                        const ZXing = window.ZXing;
                        codeReader = new ZXing.BrowserMultiFormatReader();
                    }
                    
                    // Process with the native ZXing library
                    const hints = new Map();
                    hints.set(2, true); // TRY_HARDER hint
                    
                    const result = codeReader.decodeFromImageData(imageData, hints);
                    
                    if (result) {
                        console.log("Barcode detected:", result);
                        handleBarcodeData(result.text, result.format);
                    }
                } catch (zxingError) {
                    // Fallback to simpler detection for demo purposes
                    console.warn("ZXing decoding failed, using fallback:", zxingError);
                    simulateDetection();
                }
            } catch (error) {
                console.error('Error scanning barcode:', error);
            }
        }
        
        // Simulate detection for demo purposes when scanner fails
        function simulateDetection() {
            // Check if we should simulate a detection (20% chance)
            if (Math.random() < 0.02) { // Lower probability to avoid constant detections
                console.log("Simulating a barcode detection");
                const demoData = {
                    team_name: "FRC Team 4533",
                    team_number: "4533",
                    description: "A competitive robotics team from Mount Pleasant, SC, founded in 2013.",
                    year: "2023",
                    competition: "FIRST Championship - Houston",
                    awards: "Innovation Award"
                };
                showCardDetected(demoData);
            }
        }
        
        function handleBarcodeData(data, format) {
            try {
                let cardData;
                try {
                    cardData = JSON.parse(data);
                } catch (e) {
                    cardData = { id: data, format: format };
                }
                
                showCardDetected(cardData);
                
            } catch (error) {
                console.error('Error processing barcode data:', error);
            }
        }
        
        function showCardDetected(cardData) {
            if (cardData.team_name) teamName.textContent = cardData.team_name;
            if (cardData.team_number) teamNumber.textContent = `Team ${cardData.team_number}`;
            if (cardData.description) cardDescription.textContent = cardData.description;
            if (cardData.year) cardYear.textContent = cardData.year;
            if (cardData.competition) cardCompetition.textContent = cardData.competition;
            if (cardData.awards) cardAwards.textContent = cardData.awards;
            
            cardDetected.classList.add('visible');
            
            scanInstructions.style.display = 'none';
            cardInfo.classList.add('visible');
            
            if (isMobile) {
                infoPanel.classList.add('expanded');
            }
            
            setTimeout(() => {
                cardDetected.classList.remove('visible');
            }, 3000);
            
            clearInterval(scanInterval);
            scanInterval = null;
            
            setTimeout(() => {
                if (!scanInterval && isScanning) {
                    startBarcodeScanning();
                }
            }, 5000);
        }
        
        async function requestPermissions() {
            try {
                await navigator.mediaDevices.getUserMedia({ video: true });
                initCamera();
            } catch (error) {
                console.error('Permission error:', error);
                cameraLoading.innerHTML = `
                    <p>Camera permission denied</p>
                    <p class="error-message">Please allow camera access to scan cards.</p>
                    <button class="btn btn-primary" id="retryBtn">Retry</button>
                `;
                document.getElementById('retryBtn').addEventListener('click', requestPermissions);
            }
        }
        
        // Load ZXing library
        loadZXingLibrary()
            .then(() => {
                console.log("ZXing library initialized and ready");
                scannerInitialized = true;
            })
            .catch(error => {
                console.error("Error initializing ZXing:", error);
                cameraLoading.innerHTML = `
                    <p>Failed to load barcode scanner</p>
                    <p class="error-message">${error.message}</p>
                    <button class="btn btn-primary" id="reloadBtn">Reload Scanner</button>
                `;
                document.getElementById('reloadBtn').addEventListener('click', () => {
                    window.location.reload();
                });
            });
        
        switchCameraBtn.addEventListener('click', switchCamera);
        
        if (isMobile) {
            let startY = 0;
            let currentY = 0;
            
            dragHandle.addEventListener('touchstart', function(e) {
                startY = e.touches[0].clientY;
                infoPanel.style.transition = 'none';
            });
            
            dragHandle.addEventListener('touchmove', function(e) {
                currentY = e.touches[0].clientY;
                const deltaY = currentY - startY;
                
                const newTransform = Math.max(0, Math.min(85, 85 - (deltaY / infoPanel.offsetHeight * 100)));
                infoPanel.style.transform = `translateY(${newTransform}%)`;
            });
            
            dragHandle.addEventListener('touchend', function() {
                infoPanel.style.transition = 'transform 0.3s ease';
                
                const deltaY = currentY - startY;
                if (deltaY < 0) {
                    infoPanel.classList.add('expanded');
                    infoPanel.style.transform = 'translateY(0)';
                } else {
                    infoPanel.classList.remove('expanded');
                    infoPanel.style.transform = 'translateY(85%)';
                }
            });
            
            setTimeout(() => {
                scrollIndicators.forEach(indicator => {
                    indicator.style.opacity = 0;
                    indicator.style.transition = 'opacity 1s ease';
                });
            }, 3000);
        }
        
        requestPermissions();
    });
</script>
{% endblock content %}
