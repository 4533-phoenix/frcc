{% extends "base.tera" %}

{% block head %}
{{ super() }}
<script src="https://unpkg.com/zxing-wasm@2.1.0/dist/iife/reader/index.js"></script>
<style>
    .scan-container {
        display: flex;
        height: calc(100vh - 120px);
        position: relative;
        overflow: hidden;
    }

    .camera-container {
        flex: 1;
        position: relative;
        overflow: hidden;
        background-color: #000;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    #video {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .info-panel {
        width: 350px;
        background-color: var(--background-primary);
        box-shadow: -5px 0 15px rgba(0, 0, 0, 0.1);
        padding: 2rem;
        overflow-y: auto;
        transition: transform 0.3s ease;
        z-index: 10;
    }

    .camera-controls {
        position: absolute;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 5;
        display: flex;
        gap: 1rem;
    }

    .control-btn {
        background: rgba(0, 0, 0, 0.6);
        color: white;
        border: none;
        border-radius: 50%;
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: var(--transition);
    }

    .control-btn:hover {
        background: rgba(0, 0, 0, 0.8);
        transform: scale(1.05);
    }

    .control-icon {
        width: 24px;
        height: 24px;
    }

    .camera-loading {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: white;
        text-align: center;
    }

    .loading-spinner {
        width: 50px;
        height: 50px;
        border: 5px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: var(--primary);
        animation: spin 1s ease-in-out infinite;
        margin: 0 auto 1rem;
    }

    @keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    .card-detected {
        position: absolute;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: var(--gradient-primary);
        color: white;
        padding: 10px 20px;
        border-radius: 30px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        opacity: 0;
        transition: opacity 0.3s ease;
        z-index: 5;
    }

    .card-detected.visible {
        opacity: 1;
        animation: pulse 2s infinite;
    }

    @keyframes pulse {
        0% {
            box-shadow: 0 0 0 0 rgba(95, 190, 203, 0.7);
        }

        70% {
            box-shadow: 0 0 0 10px rgba(95, 190, 203, 0);
        }

        100% {
            box-shadow: 0 0 0 0 rgba(95, 190, 203, 0);
        }
    }

    .scan-instructions {
        text-align: center;
        padding: 2rem 0;
    }

    .scan-instructions img {
        width: 100px;
        height: 100px;
        margin: 0 auto 1rem;
        opacity: 0.7;
    }

    .card-info {
        display: none;
    }

    .card-info.visible {
        display: block;
        animation: fadeIn 0.5s ease;
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .card-image {
        width: 100%;
        height: 200px;
        background: var(--gradient-primary);
        border-radius: var(--border-radius);
        margin-bottom: 1.5rem;
    }

    .card-stats {
        margin-top: 1.5rem;
    }

    .stat-row {
        display: flex;
        justify-content: space-between;
        padding: 0.5rem 0;
        border-bottom: 1px solid rgba(95, 190, 203, 0.2);
    }

    .stat-label {
        font-weight: 600;
        color: var(--primary);
    }
    
    /* Mobile optimization styles */
    .panel-toggle {
        display: none;
        width: 40px;
        height: 5px;
        background-color: rgba(95, 190, 203, 0.3);
        border-radius: 5px;
        margin: 10px auto;
        cursor: grab;
        position: relative;
    }
    
    .panel-toggle::before {
        content: "";
        position: absolute;
        width: 25px;
        height: 5px;
        background-color: rgba(95, 190, 203, 0.3);
        border-radius: 5px;
        top: -10px;
        left: 50%;
        transform: translateX(-50%);
    }
    
    /* Mobile styles (portrait orientation) */
    @media (max-width: 768px) {
        .scan-container {
            flex-direction: column;
            height: calc(100vh - 80px);
        }
        
        .camera-container {
            flex: 1;
            height: 60vh;
        }
        
        .info-panel {
            width: 100%;
            height: auto;
            max-height: 40vh;
            min-height: 60px;
            box-shadow: 0 -5px 15px rgba(0, 0, 0, 0.1);
            padding: 0 1rem 1rem;
            position: relative;
            transition: transform 0.2s ease;
            transform: translateY(0);
            will-change: transform;
            touch-action: none;
        }
        
        .info-panel.dragging {
            transition: none;
        }
        
        .info-panel-content {
            padding-top: 1rem;
            overflow-y: auto;
            max-height: calc(40vh - 25px);
        }
        
        .panel-toggle {
            display: block;
            touch-action: none;
        }
        
        .control-btn {
            width: 50px;
            height: 50px;
        }
        
        .camera-controls {
            bottom: 15px;
        }
        
        .scan-instructions {
            padding: 0.5rem 0;
        }
        
        .scan-instructions img {
            width: 60px;
            height: 60px;
        }
        
        .card-image {
            height: 150px;
        }
        
        .button-container {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }
    }
    
    /* Mobile styles (landscape orientation) */
    @media (max-width: 768px) and (orientation: landscape) {
        .scan-container {
            flex-direction: row;
            height: calc(100vh - 80px);
        }
        
        .camera-container {
            flex: 1;
            height: 100%;
        }
        
        .info-panel {
            width: 280px;
            min-width: 50px;
            height: 100%;
            max-height: none;
            transform: translateX(0);
            padding: 1rem;
            padding-left: 25px;
        }
        
        .info-panel-content {
            height: 100%;
            max-height: calc(100vh - 80px);
            padding-top: 0;
            overflow-y: auto;
        }
        
        .panel-toggle {
            position: absolute;
            top: 50%;
            left: 10px;
            transform: translateY(-50%) rotate(90deg);
            margin: 0;
            width: 40px;
            height: 5px;
        }
        
        .panel-toggle::before {
            top: -10px;
        }
    }
</style>
{% endblock head %}

{% block title %}Scan Cards{% endblock title %}

{% block content %}
<section class="scan-container" id="scanContainer">
    <div class="camera-container">
        <video id="video" autoplay playsinline></video>

        <div class="camera-loading" id="cameraLoading">
            <div class="loading-spinner"></div>
            <p>Initializing camera...</p>
        </div>

        <div class="card-detected" id="cardDetected">
            Card Detected!
        </div>

        <div class="camera-controls">
            <button class="control-btn" id="switchCameraBtn" aria-label="Switch camera">
                <svg class="control-icon" width="24" height="24" viewBox="0 0 24 24" fill="white">
                    <path
                        d="M20 4h-3.17L15 2H9L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-5 11.5V13H9v2.5L5.5 12 9 8.5V11h6V8.5l3.5 3.5-3.5 3.5z" />
                </svg>
            </button>
        </div>
    </div>

    <div class="info-panel" id="infoPanel">
        <div class="panel-toggle" id="panelToggle"></div>
        
        <div class="info-panel-content">
            <div class="scan-instructions" id="scanInstructions">
                <img src="/images/aztec.svg" alt="Scan icon" aria-hidden="true">
                <h2>Scan a Card</h2>
                <p>Point your camera at any FCC card to view its details and AR content.</p>
            </div>

            <div class="card-info" id="cardInfo">
                <h2 id="teamName">Team Name</h2>
                <h3 id="teamNumber">Team Number</h3>

                <div class="card-image" id="cardImage"></div>

                <p id="cardDescription">Information about the team and their robot will appear here when you scan a card.
                </p>

                <div class="card-stats">
                    <div class="stat-row">
                        <span class="stat-label">Year</span>
                        <span id="cardYear">2023</span>
                    </div>
                    <div class="stat-row">
                        <span class="stat-label">Competition</span>
                        <span id="cardCompetition">Championship</span>
                    </div>
                    <div class="stat-row">
                        <span class="stat-label">Awards</span>
                        <span id="cardAwards">Innovation Award</span>
                    </div>
                </div>

                <div class="button-container">
                    <button class="btn btn-primary" id="viewArBtn">View in AR</button>
                    <button class="btn btn-secondary" id="addToCollectionBtn">Add to Collection</button>
                </div>
            </div>
        </div>
    </div>
</section>
{% endblock content %}

{% block scripts %}
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Device and orientation detection
        const isMobile = {
            Android: function() {
                return navigator.userAgent.match(/Android/i);
            },
            iOS: function() {
                return navigator.userAgent.match(/iPhone|iPad|iPod/i);
            },
            any: function() {
                return (isMobile.Android() || isMobile.iOS());
            }
        };
        
        const isPortrait = () => window.matchMedia("(orientation: portrait)").matches;
        
        // Set up draggable panel for mobile
        const setupDraggablePanel = () => {
            const infoPanel = document.getElementById('infoPanel');
            const panelToggle = document.getElementById('panelToggle');
            const isMobileDevice = window.innerWidth <= 768 || isMobile.any();
            
            if (!infoPanel || !panelToggle) return;
            
            // Variables for dragging
            let isDragging = false;
            let startY = 0;
            let startX = 0;
            let currentY = 0;
            let currentX = 0;
            let startTransform = 0;
            let minPosition, maxPosition;
            
            // Element initial states
            if (isMobileDevice) {
                document.body.classList.add('mobile-device');
                
                // Initial position and boundaries depend on orientation
                if (isPortrait()) {
                    infoPanel.classList.add('portrait-mode');
                    infoPanel.classList.remove('landscape-mode');
                    
                    // Default to partially collapsed in portrait mode
                    const panelHeight = infoPanel.offsetHeight;
                    minPosition = -panelHeight + 60; // Collapsed (showing only the handle)
                    maxPosition = 0; // Fully expanded
                    
                    // Start partially collapsed
                    infoPanel.style.transform = `translateY(${minPosition * 0.7}px)`;
                } else {
                    infoPanel.classList.remove('portrait-mode');
                    infoPanel.classList.add('landscape-mode');
                    
                    // Default to partially collapsed in landscape mode
                    const panelWidth = infoPanel.offsetWidth;
                    minPosition = -panelWidth + 50; // Collapsed (showing only the handle)
                    maxPosition = 0; // Fully expanded
                    
                    // Start partially collapsed
                    infoPanel.style.transform = `translateX(${minPosition * 0.7}px)`;
                }
                
                // Touch events for dragging
                panelToggle.addEventListener('touchstart', handleDragStart, { passive: false });
                infoPanel.addEventListener('touchstart', handleDragStart, { passive: false });
                document.addEventListener('touchmove', handleDragMove, { passive: false });
                document.addEventListener('touchend', handleDragEnd);
                
                // Mouse events (for testing on desktop)
                panelToggle.addEventListener('mousedown', handleDragStart);
                infoPanel.addEventListener('mousedown', handleDragStart);
                document.addEventListener('mousemove', handleDragMove);
                document.addEventListener('mouseup', handleDragEnd);
            } else {
                document.body.classList.remove('mobile-device');
                infoPanel.classList.remove('portrait-mode', 'landscape-mode');
                infoPanel.style.transform = '';
                
                // Remove event listeners if exists
                panelToggle.removeEventListener('touchstart', handleDragStart);
                infoPanel.removeEventListener('touchstart', handleDragStart);
                document.removeEventListener('touchmove', handleDragMove);
                document.removeEventListener('touchend', handleDragEnd);
                
                panelToggle.removeEventListener('mousedown', handleDragStart);
                infoPanel.removeEventListener('mousedown', handleDragStart);
                document.removeEventListener('mousemove', handleDragMove);
                document.removeEventListener('mouseup', handleDragEnd);
            }
            
            // Drag start handler
            function handleDragStart(e) {
                // Only process drag from the panel or handle
                if (e.target !== infoPanel && e.target !== panelToggle && !infoPanel.contains(e.target)) return;
                
                // Prevent default to avoid text selection and scrolling
                e.preventDefault();
                
                isDragging = true;
                infoPanel.classList.add('dragging');
                
                // Get touch/mouse coordinates
                if (e.type === 'touchstart') {
                    startY = e.touches[0].clientY;
                    startX = e.touches[0].clientX;
                } else {
                    startY = e.clientY;
                    startX = e.clientX;
                }
                
                // Get current transform values
                const transform = window.getComputedStyle(infoPanel).getPropertyValue('transform');
                const matrix = new DOMMatrixReadOnly(transform);
                
                // Extract current translation
                if (isPortrait()) {
                    startTransform = matrix.m42; // Y translation
                    
                    // Recalculate boundaries based on current size
                    const panelHeight = infoPanel.offsetHeight;
                    minPosition = -panelHeight + 60;
                    maxPosition = 0;
                } else {
                    startTransform = matrix.m41; // X translation
                    
                    // Recalculate boundaries based on current size
                    const panelWidth = infoPanel.offsetWidth;
                    minPosition = -panelWidth + 50;
                    maxPosition = 0;
                }
                
                currentY = startTransform;
                currentX = startTransform;
            }
            
            // Drag move handler
            function handleDragMove(e) {
                if (!isDragging) return;
                
                // Prevent default to avoid scrolling
                e.preventDefault();
                
                let clientY, clientX;
                if (e.type === 'touchmove') {
                    clientY = e.touches[0].clientY;
                    clientX = e.touches[0].clientX;
                } else {
                    clientY = e.clientY;
                    clientX = e.clientX;
                }
                
                // Calculate movement
                const deltaY = clientY - startY;
                const deltaX = clientX - startX;
                
                if (isPortrait()) {
                    // Update position with bounds check
                    currentY = Math.min(Math.max(startTransform + deltaY, minPosition), maxPosition);
                    infoPanel.style.transform = `translateY(${currentY}px)`;
                } else {
                    // Update position with bounds check
                    currentX = Math.min(Math.max(startTransform + deltaX, minPosition), maxPosition);
                    infoPanel.style.transform = `translateX(${currentX}px)`;
                }
            }
            
            // Drag end handler
            function handleDragEnd() {
                if (!isDragging) return;
                
                isDragging = false;
                infoPanel.classList.remove('dragging');
                
                // Snap to nearest position (open or closed)
                if (isPortrait()) {
                    // Calculate threshold for snapping
                    const threshold = minPosition / 2;
                    
                    if (currentY < threshold) {
                        // Snap to collapsed
                        infoPanel.style.transform = `translateY(${minPosition}px)`;
                    } else {
                        // Snap to expanded
                        infoPanel.style.transform = `translateY(${maxPosition}px)`;
                    }
                } else {
                    // Calculate threshold for snapping
                    const threshold = minPosition / 2;
                    
                    if (currentX < threshold) {
                        // Snap to collapsed
                        infoPanel.style.transform = `translateX(${minPosition}px)`;
                    } else {
                        // Snap to expanded
                        infoPanel.style.transform = `translateX(${maxPosition}px)`;
                    }
                }
            }
            
            // Method to expand panel programmatically (used when card is detected)
            window.expandInfoPanel = function() {
                if (isPortrait()) {
                    infoPanel.style.transform = `translateY(${maxPosition}px)`;
                } else {
                    infoPanel.style.transform = `translateX(${maxPosition}px)`;
                }
            };
            
            // Method to collapse panel programmatically
            window.collapseInfoPanel = function() {
                if (isPortrait()) {
                    infoPanel.style.transform = `translateY(${minPosition}px)`;
                } else {
                    infoPanel.style.transform = `translateX(${minPosition}px)`;
                }
            };
        };

        // Rest of the existing code for scan functionality
        const elements = {
            video: document.getElementById('video'),
            loading: document.getElementById('cameraLoading'),
            detected: document.getElementById('cardDetected'),
            switchBtn: document.getElementById('switchCameraBtn'),
            instructions: document.getElementById('scanInstructions'),
            cardInfo: document.getElementById('cardInfo'),
            teamName: document.getElementById('teamName'),
            teamNumber: document.getElementById('teamNumber'),
            description: document.getElementById('cardDescription'),
            year: document.getElementById('cardYear'),
            competition: document.getElementById('cardCompetition'),
            awards: document.getElementById('cardAwards'),
            arButton: document.getElementById('viewArBtn'),
            collectionButton: document.getElementById('addToCollectionBtn'),
            infoPanel: document.getElementById('infoPanel')
        };

        const state = {
            stream: null,
            scanInterval: null,
            cameras: [],
            currentCamera: 0,
            scanning: false,
            lastScannedId: null,
            lastScanTime: 0,
            isMobileDevice: isMobile.any()
        };

        // ===== CAMERA INITIALIZATION =====

        async function start() {
            try {
                await navigator.mediaDevices.getUserMedia({ video: true });
                initCamera();
            } catch (error) {
                elements.loading.innerHTML = `
                    <p>Camera permission denied</p>
                    <p class="error-message">Please allow camera access to scan cards.</p>
                    <button class="btn btn-primary" id="retryBtn">Retry</button>
                `;
                document.getElementById('retryBtn').addEventListener('click', start);
            }
        }

        async function initCamera() {
            try {
                const devices = await navigator.mediaDevices.enumerateDevices();
                state.cameras = devices.filter(device => device.kind === 'videoinput');

                if (state.cameras.length === 0) {
                    throw new Error('No cameras found');
                }

                await startCamera();
                elements.loading.style.display = 'none';
                elements.switchBtn.style.display = state.cameras.length > 1 ? 'flex' : 'none';
                startScanning();
            } catch (error) {
                elements.loading.innerHTML = `
                    <p>Camera access error</p>
                    <p class="error-message">${error.message}</p>
                    <button class="btn btn-primary" id="retryBtn">Retry</button>
                `;
                document.getElementById('retryBtn').addEventListener('click', initCamera);
            }
        }

        async function startCamera() {
            if (state.stream) {
                state.stream.getTracks().forEach(track => track.stop());
            }

            if (state.scanInterval) {
                clearInterval(state.scanInterval);
                state.scanInterval = null;
            }

            try {
                // Set appropriate camera constraints for device type and orientation
                let constraints = {
                    video: {
                        width: { ideal: 1280 },
                        height: { ideal: 720 }
                    }
                };
                
                // For mobile, prefer back camera and adjust for orientation
                if (state.isMobileDevice) {
                    constraints.video.facingMode = { ideal: 'environment' };
                    
                    // Adjust dimensions based on orientation
                    if (isPortrait()) {
                        constraints.video.width = { ideal: 720 };
                        constraints.video.height = { ideal: 1280 };
                    }
                }
                
                // Use specific device if available
                if (state.cameras.length > 0 && state.currentCamera >= 0) {
                    constraints.video.deviceId = { ideal: state.cameras[state.currentCamera].deviceId };
                }

                state.stream = await navigator.mediaDevices.getUserMedia(constraints);
                elements.video.srcObject = state.stream;
                
                // Adjust video display based on current orientation
                adjustVideoDisplay();

                const devices = await navigator.mediaDevices.enumerateDevices();
                state.cameras = devices.filter(device => device.kind === 'videoinput');
                elements.switchBtn.style.display = state.cameras.length > 1 ? 'flex' : 'none';

                if (state.currentCamera >= state.cameras.length) {
                    state.currentCamera = 0;
                }
            } catch (error) {
                throw error;
            }
        }

        async function switchCamera() {
            state.currentCamera = (state.currentCamera + 1) % state.cameras.length;
            state.scanning = false;
            await startCamera();
            startScanning();
        }

        // Adjust video display based on orientation
        const adjustVideoDisplay = () => {
            const video = document.getElementById('video');
            if (!video) return;
            
            // For mobile devices, adjust the video constraints based on orientation
            if (isMobile.any()) {
                const isLandscape = !isPortrait();
                const videoTrack = state.stream?.getVideoTracks()[0];
                
                if (videoTrack && videoTrack.getConstraints) {
                    const constraints = videoTrack.getConstraints();
                    if (isLandscape && constraints.height?.ideal > constraints.width?.ideal) {
                        // Switch to landscape-optimized constraints if needed
                        videoTrack.applyConstraints({
                            width: { ideal: 1280 },
                            height: { ideal: 720 }
                        }).catch(err => console.log('Could not apply video constraints', err));
                    } else if (!isLandscape && constraints.width?.ideal > constraints.height?.ideal) {
                        // Switch to portrait-optimized constraints if needed
                        videoTrack.applyConstraints({
                            width: { ideal: 720 },
                            height: { ideal: 1280 }
                        }).catch(err => console.log('Could not apply video constraints', err));
                    }
                }
            }
        };

        // ===== BARCODE SCANNING =====

        function startScanning() {
            state.scanning = true;
            state.scanInterval = setInterval(() => {
                if (elements.video.readyState === elements.video.HAVE_ENOUGH_DATA) {
                    scanBarcode();
                }
            }, 500);
        }

        async function scanBarcode() {
            if (!elements.video.videoWidth) return;

            try {
                const canvas = document.createElement('canvas');
                canvas.width = elements.video.videoWidth;
                canvas.height = elements.video.videoHeight;
                const ctx = canvas.getContext('2d');
                ctx.drawImage(elements.video, 0, 0, canvas.width, canvas.height);

                const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);

                try {
                    const results = await ZXingWASM.readBarcodes(imageData, {
                        formats: ["Aztec"],
                        tryHarder: true
                    });

                    if (results && results.length > 0) {
                        processDetectedCode(results[0].text, results[0].format);
                    }
                } catch (error) {
                    // Silent fail - barcode scanning errors are expected
                }
            } catch (error) {
                // Silent fail - frame capture errors are expected
            }
        }

        // ===== CARD DATA PROCESSING =====

        function processDetectedCode(text, format) {
            try {
                if (!text.startsWith('FRCC-')) return;

                const cardId = text.substring(5);

                // Debounce scanning - don't process same card repeatedly
                const now = Date.now();
                if (state.lastScannedId === cardId && now - state.lastScanTime < 5000) {
                    return;
                }

                // Update debounce tracking
                state.lastScannedId = cardId;
                state.lastScanTime = now;

                requestCardData(cardId);
            } catch (error) {
                // Silent fail
            }
        }

        function requestCardData(cardId) {
            elements.detected.textContent = "Card Found!";
            elements.detected.classList.add('visible');

            // Hide the notification after 3 seconds
            setTimeout(() => {
                elements.detected.classList.remove('visible');
            }, 3000);

            // Make a request to the backend API
            fetch(`/api/scan/${cardId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Card not found');
                    }
                    return response.json();
                })
                .then(cardData => {
                    displayCardData(cardData);
                })
                .catch(error => {
                    console.error('Error fetching card data:', error);
                    // You can show an error message to the user here
                });
        }

        function displayCardData(cardData) {
            // Display team info
            elements.teamName.textContent = cardData.team_name || "Team Name";
            elements.teamNumber.textContent = `Team ${cardData.team_number}` || "Team Number";

            // Set card image if available
            if (cardData.image_path) {
                elements.cardImage.style.background = `url('${cardData.image_path}') no-repeat center/cover`;
            } else {
                elements.cardImage.style.background = 'var(--gradient-primary)';
            }

            // Set description or note
            elements.description.textContent = cardData.note || "No description available";

            // Set other details
            elements.year.textContent = cardData.card_year || "N/A";
            elements.competition.textContent = "FIRST Championship"; // This could come from the backend in the future

            // Create abilities display
            if (cardData.abilities && cardData.abilities.length > 0) {
                // Clear existing awards
                elements.awards.innerHTML = '';

                // Create abilities list
                const abilitiesList = document.createElement('div');
                abilitiesList.className = 'abilities-list';

                cardData.abilities.forEach(ability => {
                    const abilityItem = document.createElement('div');
                    abilityItem.className = 'ability-item';
                    abilityItem.innerHTML = `
                        <span class="ability-title">${ability.title} (${ability.quantity})</span>
                        <span class="ability-desc">${ability.description}</span>
                    `;
                    abilitiesList.appendChild(abilityItem);
                });

                // Add abilities to the awards element (repurposing it for abilities)
                elements.awards.appendChild(abilitiesList);
            } else {
                elements.awards.textContent = "None listed";
            }

            // Update AR button to use 3D model path if available
            if (cardData.model_3d_path) {
                elements.arButton.dataset.modelPath = cardData.model_3d_path;
            }

            // Show card info and hide instructions
            elements.instructions.style.display = 'none';
            elements.cardInfo.classList.add('visible');
            
            // For mobile devices: expand the panel when card is detected
            if (state.isMobileDevice || window.innerWidth <= 768) {
                if (typeof window.expandInfoPanel === 'function') {
                    window.expandInfoPanel();
                }
            }

            // Pause scanning while showing card
            clearInterval(state.scanInterval);
            state.scanInterval = null;

            // Setup button actions
            setupCardButtons(cardData);

            // Resume scanning after a delay
            setTimeout(() => {
                if (state.scanning) {
                    startScanning();
                }
            }, 5000);
        }

        function setupCardButtons(cardData) {
            elements.collectionButton.onclick = function () {
                this.disabled = true;
                this.textContent = "Added to Collection";
                this.classList.remove('btn-secondary');
                this.classList.add('btn-primary');

                // Here you would make a call to add the card to the user's collection
                fetch('/api/collection/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ team_number: cardData.team_number, year: cardData.card_year })
                }).catch(error => {
                    console.error('Error adding card to collection:', error);
                });
            };

            elements.arButton.onclick = function () {
                // Use the 3D model path from the card data if available
                const modelPath = this.dataset.modelPath || null;
                if (modelPath) {
                    window.location.href = `/ar?model=${encodeURIComponent(modelPath)}&team=${cardData.team_number}`;
                } else {
                    alert(`AR view not available for Team ${cardData.team_number}`);
                }
            };
        }

        // Event listeners
        elements.switchBtn.addEventListener('click', switchCamera);
        
        // Handle orientation changes
        window.addEventListener('orientationchange', function() {
            // Short delay to allow the browser to complete orientation change
            setTimeout(function() {
                setupDraggablePanel();
                adjustVideoDisplay();
            }, 300);
        });
        
        // Handle resize events
        window.addEventListener('resize', function() {
            setupDraggablePanel();
        });
        
        // Initialize draggable panel
        setupDraggablePanel();
        
        // Start camera
        start();
    });
</script>
{% endblock scripts %}
