{% extends "base.tera" %}

{% block head %}
{{ super() }}
<style>
    /* Simplified scan page styles */
    .scan-container {
        display: flex;
        height: calc(100vh - 120px);
        position: relative;
        overflow: hidden;
    }
    
    /* Camera section */
    .camera-container {
        flex: 1;
        position: relative;
        background-color: #000;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
    }
    
    #reader {
        width: 100% !important;
        height: 100% !important;
        position: absolute !important;
        top: 0;
        left: 0;
    }
    
    #reader video {
        width: 100% !important;
        height: 100% !important;
        object-fit: cover !important;
    }
    
    #reader__scan_region {
        display: flex;
        justify-content: center;
        align-items: center;
    }
    
    #reader__scan_region img {
        display: none; /* Hide the default QR frame image */
    }
    
    .scan-frame {
        position: absolute;
        width: 250px;
        height: 250px;
        border: 2px solid var(--primary);
        border-radius: 15px;
        box-shadow: 0 0 0 4000px rgba(0, 0, 0, 0.3);
        z-index: 2;
    }
    
    .scan-frame::before, .scan-frame::after {
        content: "";
        position: absolute;
        width: 30px;
        height: 30px;
        border-color: var(--primary);
        border-style: solid;
        border-width: 0;
    }
    
    .scan-frame::before {
        top: -2px;
        left: -2px;
        border-top-width: 4px;
        border-left-width: 4px;
        border-top-left-radius: 15px;
    }
    
    .scan-frame::after {
        bottom: -2px;
        right: -2px;
        border-bottom-width: 4px;
        border-right-width: 4px;
        border-bottom-right-radius: 15px;
    }
    
    /* Info panel */
    .info-panel {
        width: 350px;
        background-color: var(--background-primary);
        box-shadow: -5px 0 15px rgba(0, 0, 0, 0.1);
        padding: 2rem;
        overflow-y: auto;
        z-index: 10;
    }
    
    /* Controls and indicators */
    .control-btn {
        background: rgba(0, 0, 0, 0.6);
        color: white;
        border: none;
        border-radius: 50%;
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: var(--transition);
    }
    
    .control-btn:hover {
        background: rgba(0, 0, 0, 0.8);
        transform: scale(1.05);
    }
    
    .control-icon {
        width: 24px;
        height: 24px;
        background-color: white;
        mask-size: contain;
        -webkit-mask-size: contain;
        mask-repeat: no-repeat;
        -webkit-mask-repeat: no-repeat;
        mask-position: center;
        -webkit-mask-position: center;
    }
    
    .camera-controls {
        position: absolute;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 5;
        display: flex;
        gap: 1rem;
    }
    
    .switch-camera-icon {
        mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M20 4h-3.17L15 2H9L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-5 11.5V13H9v2.5L5.5 12 9 8.5V11h6V8.5l3.5 3.5-3.5 3.5z'/%3E%3C/svg%3E");
        -webkit-mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M20 4h-3.17L15 2H9L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-5 11.5V13H9v2.5L5.5 12 9 8.5V11h6V8.5l3.5 3.5-3.5 3.5z'/%3E%3C/svg%3E");
    }
    
    /* Loading and detection states */
    .camera-loading {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: white;
        text-align: center;
    }
    
    .loading-spinner {
        width: 50px;
        height: 50px;
        border: 5px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: var(--primary);
        animation: spin 1s ease-in-out infinite;
        margin: 0 auto 1rem;
    }
    
    @keyframes spin { to { transform: rotate(360deg); } }
    
    .card-detected {
        position: absolute;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: var(--gradient-primary);
        color: white;
        padding: 10px 20px;
        border-radius: 30px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        opacity: 0;
        transition: opacity 0.3s ease;
        z-index: 5;
    }
    
    .card-detected.visible {
        opacity: 1;
        animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
        0% { box-shadow: 0 0 0 0 rgba(95, 190, 203, 0.7); }
        70% { box-shadow: 0 0 0 10px rgba(95, 190, 203, 0); }
        100% { box-shadow: 0 0 0 0 rgba(95, 190, 203, 0); }
    }
    
    /* Panel content */
    .scan-instructions {
        text-align: center;
        padding: 2rem 0;
    }
    
    .scan-instructions svg {
        width: 100px;
        height: 100px;
        margin: 0 auto 1rem;
        color: var(--primary);
        opacity: 0.7;
    }
    
    .card-info {
        display: none;
    }
    
    .card-info.visible {
        display: block;
        animation: fadeIn 0.5s ease;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .card-image {
        width: 100%;
        height: 200px;
        background: var(--gradient-primary);
        border-radius: var(--border-radius);
        margin-bottom: 1.5rem;
    }
    
    .card-stats {
        margin-top: 1.5rem;
    }
    
    .stat-row {
        display: flex;
        justify-content: space-between;
        padding: 0.5rem 0;
        border-bottom: 1px solid rgba(95, 190, 203, 0.2);
    }
    
    .stat-label {
        font-weight: 600;
        color: var(--primary);
    }
    
    /* Mobile styles */
    @media (max-width: 768px) {
        .scan-container {
            flex-direction: column;
            height: calc(100vh - 70px);
        }
        
        .info-panel {
            width: 100%;
            height: 40%;
            box-shadow: 0 -5px 15px rgba(0, 0, 0, 0.1);
            transform: translateY(85%);
            position: absolute;
            bottom: 0;
            border-radius: 20px 20px 0 0;
            padding-top: 1rem;
            transition: transform 0.3s ease;
        }
        
        .info-panel.expanded {
            transform: translateY(0);
        }
        
        .drag-handle {
            width: 50px;
            height: 5px;
            background-color: var(--background-secondary);
            border-radius: 10px;
            margin: 0 auto 1rem;
        }
        
        /* Scroll indicators */
        .scroll-indicator {
            position: absolute;
            width: 40px;
            height: 40px;
            background-color: rgba(255, 255, 255, 0.8);
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 5;
        }
        
        .scroll-up { top: 20px; left: 50%; transform: translateX(-50%); }
        .scroll-down { bottom: 20px; left: 50%; transform: translateX(-50%); }
        .scroll-left { left: 20px; top: 50%; transform: translateY(-50%); }
        .scroll-right { right: 20px; top: 50%; transform: translateY(-50%); }
        
        .scroll-icon {
            width: 20px;
            height: 20px;
            background-color: var(--primary);
            mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z'/%3E%3C/svg%3E");
            -webkit-mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z'/%3E%3C/svg%3E");
            mask-size: contain;
            -webkit-mask-size: contain;
            mask-repeat: no-repeat;
            -webkit-mask-repeat: no-repeat;
            mask-position: center;
            -webkit-mask-position: center;
        }
        
        .arrow-up { transform: rotate(-90deg); }
        .arrow-down { transform: rotate(90deg); }
        .arrow-left { transform: rotate(180deg); }
        .arrow-right { transform: rotate(0); }
    }
</style>
{% endblock head %}

{% block title %}Scan Cards{% endblock title %}

{% block content %}
<section class="scan-container" id="scanContainer">
    <div class="camera-container">
        <!-- Replace the video element with a container for the QR scanner -->
        <div id="reader"></div>
        
        <!-- Add a custom scanning frame -->
        <div class="scan-frame" id="scanFrame"></div>
        
        <!-- Loading indicator -->
        <div class="camera-loading" id="cameraLoading">
            <div class="loading-spinner"></div>
            <p>Initializing camera...</p>
        </div>
        
        <!-- Card detected notification -->
        <div class="card-detected" id="cardDetected">
            Card Detected!
        </div>
        
        <!-- Camera controls -->
        <div class="camera-controls">
            <button class="control-btn" id="switchCameraBtn" aria-label="Switch camera">
                <span class="control-icon switch-camera-icon"></span>
            </button>
        </div>
        
        <!-- Mobile scroll indicators -->
        <div class="scroll-indicator scroll-up" id="scrollUp">
            <span class="scroll-icon arrow-icon arrow-up"></span>
        </div>
        <div class="scroll-indicator scroll-right" id="scrollRight">
            <span class="scroll-icon arrow-icon arrow-right"></span>
        </div>
        <div class="scroll-indicator scroll-down" id="scrollDown">
            <span class="scroll-icon arrow-icon arrow-down"></span>
        </div>
        <div class="scroll-indicator scroll-left" id="scrollLeft">
            <span class="scroll-icon arrow-icon arrow-left"></span>
        </div>
    </div>
    
    <div class="info-panel" id="infoPanel">
        <!-- Mobile drag handle -->
        <div class="drag-handle" id="dragHandle"></div>
        
        <!-- Default instructions -->
        <div class="scan-instructions" id="scanInstructions">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100" fill="none" stroke="currentColor" aria-hidden="true">
                <!-- Aztec barcode with bullseye pattern -->
                <rect x="10" y="10" width="80" height="80" fill="none" stroke="currentColor" stroke-width="2" />
                
                <!-- Bullseye pattern in center -->
                <rect x="40" y="40" width="20" height="20" fill="currentColor" />
                <rect x="35" y="35" width="30" height="30" fill="none" stroke="currentColor" stroke-width="1.5" />
                <rect x="30" y="30" width="40" height="40" fill="none" stroke="currentColor" stroke-width="1" />
                
                <!-- Data modules - simplified representation -->
                <rect x="25" y="25" width="5" height="5" fill="currentColor" />
                <rect x="35" y="25" width="5" height="5" fill="currentColor" />
                <rect x="60" y="25" width="5" height="5" fill="currentColor" />
                <rect x="70" y="25" width="5" height="5" fill="currentColor" />
                
                <rect x="25" y="35" width="5" height="5" fill="currentColor" />
                <rect x="70" y="35" width="5" height="5" fill="currentColor" />
                
                <rect x="25" y="60" width="5" height="5" fill="currentColor" />
                <rect x="70" y="60" width="5" height="5" fill="currentColor" />
                
                <rect x="25" y="70" width="5" height="5" fill="currentColor" />
                <rect x="35" y="70" width="5" height="5" fill="currentColor" />
                <rect x="60" y="70" width="5" height="5" fill="currentColor" />
                <rect x="70" y="70" width="5" height="5" fill="currentColor" />
                
                <rect x="15" y="15" width="5" height="5" fill="currentColor" />
                <rect x="25" y="15" width="5" height="5" fill="currentColor" />
                <rect x="45" y="15" width="5" height="5" fill="currentColor" />
                <rect x="55" y="15" width="5" height="5" fill="currentColor" />
                <rect x="80" y="15" width="5" height="5" fill="currentColor" />
                
                <rect x="15" y="80" width="5" height="5" fill="currentColor" />
                <rect x="40" y="80" width="5" height="5" fill="currentColor" />
                <rect x="55" y="80" width="5" height="5" fill="currentColor" />
                <rect x="80" y="80" width="5" height="5" fill="currentColor" />
            </svg>
            <h2>Scan a Card</h2>
            <p>Point your camera at any FRCC card to view its details and AR content.</p>
        </div>
        
        <!-- Card information (hidden by default) -->
        <div class="card-info" id="cardInfo">
            <h2 id="teamName">Team Name</h2>
            <h3 id="teamNumber">Team Number</h3>
            
            <div class="card-image" id="cardImage"></div>
            
            <p id="cardDescription">Information about the team and their robot will appear here when you scan a card.</p>
            
            <div class="card-stats">
                <div class="stat-row">
                    <span class="stat-label">Year</span>
                    <span id="cardYear">2023</span>
                </div>
                <div class="stat-row">
                    <span class="stat-label">Competition</span>
                    <span id="cardCompetition">Championship</span>
                </div>
                <div class="stat-row">
                    <span class="stat-label">Awards</span>
                    <span id="cardAwards">Innovation Award</span>
                </div>
            </div>
            
            <!-- Updated button container with flex and spacing -->
            <div class="button-container flex flex-gap">
                <button class="btn btn-primary" id="viewArBtn">View in AR</button>
                <div id="collectionStatus">
                    <!-- Will be populated by JavaScript based on login state -->
                </div>
            </div>

            <!-- Login message for non-authenticated users -->
            <div class="login-message" id="loginMessage" style="display: none; margin-top: 1rem; text-align: center; padding: 0.75rem; border-radius: var(--border-radius); background-color: rgba(95, 190, 203, 0.1);">
                <p>Sign in to automatically save cards to your collection</p>
                <a href="/signin" class="btn btn-secondary" style="margin-top: 0.5rem;">Sign In</a>
            </div>
        </div>
    </div>
</section>

<!-- Replace module scripts with the HTML5-QRCode CDN -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/html5-qrcode/2.3.8/html5-qrcode.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // DOM Elements
        const cameraLoading = document.getElementById('cameraLoading');
        const cardDetected = document.getElementById('cardDetected');
        const switchCameraBtn = document.getElementById('switchCameraBtn');
        const infoPanel = document.getElementById('infoPanel');
        const scanInstructions = document.getElementById('scanInstructions');
        const cardInfo = document.getElementById('cardInfo');
        const dragHandle = document.getElementById('dragHandle');
        const scanFrame = document.getElementById('scanFrame');
        
        // State variables
        let html5QrCode = null;
        let currentCamera = null;
        let availableCameras = [];
        let currentCameraIndex = 0;
        let lastDetection = 0;
        let isScanning = false;
        
        // Mobile detection
        const isMobile = window.innerWidth <= 768;
        if (!isMobile) {
            document.querySelectorAll('.scroll-indicator').forEach(indicator => {
                indicator.style.display = 'none';
            });
        }
        
        // Initialize scanner
        async function initScanner() {
            try {
                // Create the HTML5 QR code scanner with the correct container ID
                html5QrCode = new Html5Qrcode("reader");
                
                // Get available cameras
                availableCameras = await Html5Qrcode.getCameras();
                
                if (!availableCameras.length) {
                    throw new Error('No cameras found');
                }
                
                // Start with the back camera if available
                currentCameraIndex = availableCameras.findIndex(
                    camera => camera.label.toLowerCase().includes('back') ||
                              camera.label.toLowerCase().includes('rear')
                );
                
                // If no back camera found, use the first camera
                if (currentCameraIndex === -1) currentCameraIndex = 0;
                
                // Start scanning
                await startScanner();
                
                // Show/hide camera switch button
                switchCameraBtn.style.display = availableCameras.length > 1 ? 'flex' : 'none';
                
            } catch (error) {
                cameraLoading.innerHTML = `
                    <p>Error initializing camera</p>
                    <p class="error-message">${error.message}</p>
                    <button class="btn btn-primary" id="retryBtn">Retry</button>
                `;
                document.getElementById('retryBtn')?.addEventListener('click', initScanner);
            }
        }
        
        // Start the scanner with current camera
        async function startScanner() {
            if (isScanning) await stopScanner();
            
            try {
                // Get current camera ID
                currentCamera = availableCameras[currentCameraIndex].id;
                
                // Configure scanner with improved settings
                const config = {
                    fps: 15,
                    qrbox: { width: 250, height: 250 },
                    aspectRatio: window.innerWidth / window.innerHeight,
                    formatsToSupport: [
                        Html5QrcodeSupportedFormats.AZTEC,
                        Html5QrcodeSupportedFormats.QR_CODE,
                        Html5QrcodeSupportedFormats.DATA_MATRIX
                    ],
                    // Hide default scan type UI
                    showTorchButtonIfSupported: false,
                    showZoomSliderIfSupported: false
                };
                
                // Start scanning
                await html5QrCode.start(
                    currentCamera, 
                    config,
                    handleCodeDetection,
                    handleScanError
                );
                
                isScanning = true;
                cameraLoading.style.display = 'none';
                
                // Position scan frame correctly after the camera starts
                setTimeout(() => {
                    scanFrame.style.display = 'block';
                }, 1000);
                
            } catch (error) {
                cameraLoading.innerHTML = `
                    <p>Camera access error</p>
                    <p class="error-message">${error.message}</p>
                    <button class="btn btn-primary" id="retryBtn">Retry</button>
                `;
                document.getElementById('retryBtn')?.addEventListener('click', startScanner);
            }
        }
        
        // Rest of the code remains unchanged
        async function stopScanner() {
            if (!isScanning || !html5QrCode) return;
            
            try {
                await html5QrCode.stop();
                isScanning = false;
            } catch (error) {
                console.error('Error stopping scanner:', error);
            }
        }
        
        function handleCodeDetection(decodedText, decodedResult) {
            const now = Date.now();
            if (now - lastDetection < 2000) return;
            lastDetection = now;
            
            cardDetected.classList.add('visible');
            scanInstructions.style.display = 'none';
            cardInfo.classList.add('visible');
            
            if (isMobile) {
                infoPanel.classList.add('expanded');
            }
            
            setTimeout(() => {
                cardDetected.classList.remove('visible');
            }, 3000);
            
            displayDummyCardData(decodedText);
            updateCollectionStatus(checkIfLoggedIn());
        }
        
        function handleScanError(error) {
            if (error.indexOf('No MultiFormat Readers') !== -1) {
                console.error('QR Code scanning error:', error);
            }
        }
        
        async function switchCamera() {
            if (availableCameras.length <= 1) return;
            
            await stopScanner();
            
            currentCameraIndex = (currentCameraIndex + 1) % availableCameras.length;
            
            await startScanner();
        }
        
        function displayDummyCardData(codeText) {
            const seed = codeText.length > 0 ? codeText.charCodeAt(0) % 5 : 0;
            
            const teams = [
                { name: "The Cheesy Poofs", number: "254", year: "2023", competition: "Championship", awards: "Winner" },
                { name: "Robonauts", number: "118", year: "2023", competition: "Houston", awards: "Finalist" },
                { name: "Phoenix", number: "4533", year: "2023", competition: "Charleston", awards: "Innovation Award" },
                { name: "Stryke Force", number: "2767", year: "2022", competition: "Michigan", awards: "Design Award" },
                { name: "Citrus Circuits", number: "1678", year: "2024", competition: "Championship", awards: "Autonomous Award" }
            ];
            
            const team = teams[seed];
            
            document.getElementById('teamName').textContent = team.name;
            document.getElementById('teamNumber').textContent = `Team ${team.number}`;
            document.getElementById('cardDescription').textContent = 
                `Team ${team.number} (${team.name}) is a FIRST Robotics Competition team known for their innovative designs and precise autonomous control. This card showcases their robot from the ${team.year} season.`;
            document.getElementById('cardYear').textContent = team.year;
            document.getElementById('cardCompetition').textContent = team.competition;
            document.getElementById('cardAwards').textContent = team.awards;
            
            const colors = ['#5fbecb', '#e94057', '#4dda6e', '#f9a03f', '#8338ec'];
            document.getElementById('cardImage').style.background = colors[seed];
        }
        
        function checkIfLoggedIn() {
            return false;
        }
        
        function updateCollectionStatus(isLoggedIn) {
            const collectionStatus = document.getElementById('collectionStatus');
            const loginMessage = document.getElementById('loginMessage');
            
            if (isLoggedIn) {
                collectionStatus.innerHTML = `
                    <div class="success-message" style="color: #4dda6e; display: flex; align-items: center; gap: 0.5rem;">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z"/>
                        </svg>
                        Added to your collection
                    </div>
                `;
                loginMessage.style.display = 'none';
            } else {
                collectionStatus.innerHTML = '';
                loginMessage.style.display = 'block';
            }
        }
        
        if (isMobile && dragHandle) {
            let startY = 0;
            let currentY = 0;
            
            dragHandle.addEventListener('touchstart', function(e) {
                startY = e.touches[0].clientY;
                infoPanel.style.transition = 'none';
            });
            
            dragHandle.addEventListener('touchmove', function(e) {
                currentY = e.touches[0].clientY;
                const deltaY = currentY - startY;
                const newTransform = Math.max(0, Math.min(85, 85 - (deltaY / infoPanel.offsetHeight * 100)));
                infoPanel.style.transform = `translateY(${newTransform}%)`;
            });
            
            dragHandle.addEventListener('touchend', function() {
                infoPanel.style.transition = 'transform 0.3s ease';
                const deltaY = currentY - startY;
                infoPanel.classList.toggle('expanded', deltaY < 0);
                infoPanel.style.transform = deltaY < 0 ? 'translateY(0)' : 'translateY(85%)';
            });
            
            setTimeout(() => {
                document.querySelectorAll('.scroll-indicator').forEach(indicator => {
                    indicator.style.opacity = 0;
                    indicator.style.transition = 'opacity 1s ease';
                });
            }, 3000);
        }
        
        switchCameraBtn.addEventListener('click', switchCamera);
        
        document.addEventListener('visibilitychange', () => {
            if (document.hidden && isScanning) {
                stopScanner();
            } else if (!document.hidden && !isScanning) {
                startScanner();
            }
        });
        
        window.addEventListener('beforeunload', () => {
            stopScanner();
        });
        
        initScanner();
    });
</script>
{% endblock content %}
